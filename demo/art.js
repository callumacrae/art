(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
window.normalLines = require('./normal-lines');
window.perimetros = require('./perimetros');

},{"./normal-lines":9,"./perimetros":11}],2:[function(require,module,exports){
const random = require('./random');

/**
 * Stores the x and y dimensions of a euclidean vector in the cartesian plane
 * and provides some useful helper functions.
 *
 * @param {number} ax The x dimension of the vector.
 * @param {number} ay The y dimension.
 * @constructor
 */
function Vector(ax, ay) {
	if (!(this instanceof Vector)) {
		return new Vector(ax, ay);
	}

	this.ax = ax;
	this.ay = ay;
}

/**
 * Calculates the magnitude of the vector.
 *
 * @returns {number} The magnitude of the vector.
 */
Vector.prototype.getMagnitude = function () {
	return Math.pow(Math.pow(this.ax, 2) + Math.pow(this.ay, 2), 0.5);
};

/**
 * Returns a new vector with a specified magnitude.
 *
 * @param {number} newMagnitude The magnitude of the new vector.
 * @returns {Vector} A new vector with specified magnitude.
 */
Vector.prototype.restrictMagnitude = function (newMagnitude) {
	const ratio = newMagnitude / this.getMagnitude();

	return new Vector(this.ax * ratio, this.ay * ratio);
};

/**
 * Changes a vector slightly by a random amount. Uses a random function with a
 * normal distribution, so it's usually not that different.
 *
 * @param {number} [factor=1] Standard deviation of the normal distribution
 * function used.
 * @returns {Vector} Slightly different vector.
 */
Vector.prototype.randomiseByFactor = function (factor = 1) {
	return new Vector(this.ax + random.normal() * factor, this.ay + random.normal() * factor);
};

/**
 * Calculates the vector between two coordinates
 *
 * @param {Coord} from Coordinate to calculate vector from
 * @param {Coord} to Coordinate to calculate vector to
 */
Vector.between = function (from, to) {
	return new Vector(to.x - from.x, to.y - from.y);
};

/**
 * Returns the average of n vectors.
 *
 * @param {...Vector} vectors One or more vectors.
 * @returns {Vector} The average vector.
 */
Vector.average = function (...vectors) {
	const ax = vectors.reduce((sum, { ax }) => sum + ax, 0) / vectors.length;
	const ay = vectors.reduce((sum, { ay }) => sum + ay, 0) / vectors.length;

	return new Vector(ax, ay);
};

/**
 * Generates a random vector going < 0.5 on the x and y axes.
 *
 * @returns {Vector} Random vector.
 */
Vector.random = function () {
	return new Vector(random(), random());
};

/**
 * Generate a vector from the direction and magnitude instead of from the
 * components.
 *
 * @param {number} direction Direction in radians.
 * @param {number} magnitude Magnitude of the vector.
 * @returns {Vector} Generated vector.
 */
Vector.fromDirection = function (direction, magnitude = 1) {
	const ax = magnitude * Math.cos(direction);
	const ay = magnitude * Math.sin(direction);
	return new Vector(ax, ay);
};

module.exports = Vector;

},{"./random":6}],3:[function(require,module,exports){
const Coord = require('./coord');

/**
 * A small wrapper function so that we don't have to mix canvas logic randomly
 * in the rest of the code. Basically makes everything testable.
 *
 * @param {string} selector The element to draw onto.
 * @constructor
 */
function Canvas(selector) {
	this._canvas = document.querySelector(selector);
	this._context = this._canvas.getContext('2d');

	this.origin = new Coord(this._canvas.width / 2, this._canvas.height / 2);
}


/**
 * Draws a path to the canvas. Path should be a string similar to how Raphael
 * does it (it's easier tested).
 *
 * @param {object} options An object containing options: path, width and color.
 */
Canvas.prototype.drawPath = function (options) {
	const context = this._context;
	context.beginPath();

	options.path.forEach(function (point) {
		switch (point.type) {
			case 'M':
				context.moveTo(point.x, point.y);
				break;

			case 'L':
				context.lineTo(point.x, point.y);
		}
	});

	context.lineWidth = options.width;
	context.strokeStyle = options.color;
	context.lineCap = options.lineCap;
	context.stroke();
};

/**
 * Fill the entire canvas with a specified color. Good for backgrounds.
 *
 * @param {string} color The color to fill the canvas with.
 */
Canvas.prototype.fill = function (color) {
	const context = this._context;
	context.rect(0, 0, this._canvas.width, this._canvas.height);
	context.fillStyle = color;
	context.fill();
};

/**
 * Export the contents of the canvas to a specified image element.
 *
 * @param {string} selector Selector matching the element to export to.
 */
Canvas.prototype.exportTo = function (selector) {
	this._canvas.toBlob(function (blob) {
		const image = document.querySelector(selector);
		image.src = URL.createObjectURL(blob);
	});
};

module.exports = Canvas;

},{"./coord":4}],4:[function(require,module,exports){
/**
 * Stores the x and y positions of a coordinate and provides some useful helper
 * functions.
 *
 * @param {number} x The x position.
 * @param {number} y The y position.
 * @constructor
 */
function Coord(x, y) {
	if (!(this instanceof Coord)) {
		return new Coord(x, y);
	}

	this.x = x;
	this.y = y;
}

/**
 * Works out the distance between two coordinates using Pythagoras' theorum.
 *
 * @param {Coord} other The other coordinate.
 * @returns {number} The distance between the two coordinates.
 */
Coord.prototype.distFrom = function (other) {
	const distX = Math.pow(this.x - other.x, 2);
	const distY = Math.pow(this.y - other.y, 2);

	return Math.pow(distX + distY, 0.5);
};

/**
 * Adds a vector to the coordinate.
 *
 * @param {Vector} vector The vector to add to the coordinate.
 * @returns {Coord} The new coordinate.
 */
Coord.prototype.add = function (vector) {
	return new Coord(this.x + vector.ax, this.y + vector.ay);
};

module.exports = Coord;

},{}],5:[function(require,module,exports){
const Vector = require('./vector');

/**
 * Generates a slightly wobbly path between two coordinates. The amount of
 * wobbliness can be changed by tweaking the above constants.
 *
 * @param {Coord} from The coordinate to draw from.
 * @param {Coord} to The coordinate to draw to.
 * @param {object} config Configuration options.
 * @returns {Array} An array representing the path to draw.
 */
function generatePath(from, to, config) {
	let path = [
		{ type: 'M', x: from.x, y: from.y }
	];

	let currentPoint = from;
	let currentDirection;

	// Safety to avoid crashing browsers
	let maxRuns = 1000;

	do {

		// This is the perfect direction: also, a boring straight line
		let perfect = Vector.between(currentPoint, to);

		let newDirection;
		if (currentDirection) {
			// This carries on most in the direction the line is currently going, but
			// skews it a little bit back towards the point it's supposed to be going
			// so that it's not too crazy
			newDirection = Vector.average(
					perfect.restrictMagnitude(config.BIAS_TO_PERFECT),
					currentDirection.restrictMagnitude(1 - config.BIAS_TO_PERFECT)
			);
		} else {
			newDirection = perfect;
		}

		newDirection = newDirection
				.restrictMagnitude(config.SEGMENT_LENGTH)
				.randomiseByFactor(config.RANDOM_FACTOR);

		let newPoint = currentPoint.add(newDirection);

		path.push({ type: 'L', x: newPoint.x, y: newPoint.y });
		currentPoint = newPoint;
		currentDirection = newDirection;

	} while (currentPoint.distFrom(to) > config.SEGMENT_LENGTH * 10 && maxRuns--);

	return path;
}

module.exports = generatePath;

},{"./vector":7}],6:[function(require,module,exports){
/**
 * Returns a random number between -0.5 and 0.5. Basically in its own function
 * so that it can be replaced with a different random function if needed.
 *
 * @returns {number} A random number between -0.5 and 0.5.
 */
function random() {
	return Math.random() - 0.5;
}

/**
 * Generate normally distributed random numbers.
 *
 * Only an approximation: actually a Irwinâ€“Hall distribution.
 *
 * @returns {number} A number between -6 and 6 that will approximately map to a
 * normal distribution.
 */
random.normal = function () {
	var total = 0;

	for (let i = 0; i < 12; i++) {
		total += random();
	}

	return total;
};

module.exports = random;

},{}],7:[function(require,module,exports){
arguments[4][2][0].apply(exports,arguments)
},{"./random":6,"dup":2}],8:[function(require,module,exports){
const random = require('../lib/random');

exports.NUMBER_OF_LINES = 1000;

exports.startLength = () => 400 + random() * 500;
exports.endLength = () => 800 + random() * 100;


exports.BACKGROUND_COLOR = '#262819';

// Colors for the path
let opacity = 0.6;

// https://color.adobe.com/Passado1-color-theme-8032401/
exports.COLORS = [
	`rgba(83, 84, 115, ${opacity})`, // blue
	`rgba(214, 216, 209, ${opacity})`, // white
	`rgba(159, 145, 124, ${opacity})`, // cream
	`rgba(142, 55, 48, ${opacity})` // red
];

exports.LINE_WIDTH = 6;


// Line generation config
exports.SEGMENT_LENGTH = 10;
exports.BIAS_TO_PERFECT = 0.5;
exports.RANDOM_FACTOR = 1;

},{"../lib/random":6}],9:[function(require,module,exports){
const Canvas = require('../lib/canvas');
const Vector = require('../lib/Vector');
const generatePath = require('../lib/generatePath');
const config = require('./config');

module.exports = function (selector) {
	const canvas = new Canvas(selector);
	const origin = canvas.origin;

	canvas.fill(config.BACKGROUND_COLOR);

	for (var i = 0; i < config.NUMBER_OF_LINES; i++) {
		let randomDirection = Vector.random();
		let start = origin.add(randomDirection.restrictMagnitude(config.startLength()));
		let end = origin.add(randomDirection.restrictMagnitude(config.endLength()));

		canvas.drawPath({
			path: generatePath(start, end, config),
			width: config.LINE_WIDTH,
			color: config.COLORS[Math.floor(Math.random() * config.COLORS.length)]
		});
	}
};

},{"../lib/Vector":2,"../lib/canvas":3,"../lib/generatePath":5,"./config":8}],10:[function(require,module,exports){
exports.BACKGROUND_COLOR = '#4E4F59';
exports.COLOR = '#F28A5C';

exports.DIGITS = '3' +
	'141592653589793238462643383279502884197169399375105820974944592307816406286' +
	'208998628034825342117067982148086513282306647093844609550582231725359408128481' +
	'117450284102701938521105559644622948954930381964428810975665933446128475648233' +
	'786783165271201909145648566923460348610454326648213393607260249141273724587006' +
	'606315588174881520920962829254091715364367892590360011330530548820466521384146' +
	'951941511609433057270365759591953092186117381932611793105118548074462379962749' +
	'567351885752724891227938183011949129833673362440656643086021394946395224737190' +
	'702179860943702770539217176293176752384674818467669405132000568127145263560827' +
	'785771342757789609173637178721468440901224953430146549585371050792279689258923' +
	'542019956112129021960864034418159813629774771309960518707211349999998372978049' +
	'951059731732816096318595024459455346908302642522308253344685035261931188171010' +
	'003137838752886587533208381420617177669147303598253490428755468731159562863882' +
	'353787593751957781857780532171226806613001927876611195909216420198938095257201' +
	'065485863278865936153381827968230301952035301852968995773622599413891249721775' +
	'283479131515574857242454150695950829533116861727855889075098381754637464939319' +
	'255060400927701671139009848824012858361603563707660104710181942955596198946767' +
	'837449448255379774726847104047534646208046684259069491293313677028989152104752' +
	'162056966024058038150193511253382430035587640247496473263914199272604269922796' +
	'782354781636009341721641219924586315030286182974555706749838505494588586926995' +
	'690927210797509302955321165344987202755960236480665499119881834797753566369807' +
	'426542527862551818417574672890977772793800081647060016145249192173217214772350' +
	'141441973568548161361157352552133475741849468438523323907394143334547762416862' +
	'518983569485562099219222184272550254256887671790494601653466804988627232791786' +
	'085784383827967976681454100953883786360950680064225125205117392984896084128488' +
	'626945604241965285022210661186306744278622039194945047123713786960956364371917' +
	'287467764657573962413890865832645995813390478027590099465764078951269468398352' +
	'595709825822620522489407726719478268482601476990902640136394437455305068203496' +
	'252451749399651431429809190659250937221696461515709858387410597885959772975498' +
	'930161753928468138268683868942774155991855925245953959431049972524680845987273' +
	'644695848653836736222626099124608051243884390451244136549762780797715691435997' +
	'700129616089441694868555848406353422072225828488648158456028506016842739452267' +
	'467678895252138522549954666727823986456596116354886230577456498035593634568174' +
	'324112515076069479451096596094025228879710893145669136867228748940560101503308' +
	'617928680920874760917824938589009714909675985261365549781893129784821682998948' +
	'722658804857564014270477555132379641451523746234364542858444795265867821051141' +
	'354735739523113427166102135969536231442952484937187110145765403590279934403742' +
	'007310578539062198387447808478489683321445713868751943506430218453191048481005' +
	'370614680674919278191197939952061419663428754440643745123718192179998391015919' +
	'561814675142691239748940907186494231961567945208095146550225231603881930142093' +
	'762137855956638937787083039069792077346722182562599661501421503068038447734549' +
	'202605414665925201497442850732518666002132434088190710486331734649651453905796' +
	'268561005508106658796998163574736384052571459102897064140110971206280439039759' +
	'515677157700420337869936007230558763176359421873125147120532928191826186125867' +
	'321579198414848829164470609575270695722091756711672291098169091528017350671274' +
	'858322287183520935396572512108357915136988209144421006751033467110314126711136' +
	'990865851639831501970165151168517143765761835155650884909989859982387345528331' +
	'635507647918535893226185489632132933089857064204675259070915481416549859461637' +
	'180270981994309924488957571282890592323326097299712084433573265489382391193259' +
	'746366730583604142813883032038249037589852437441702913276561809377344403070746' +
	'921120191302033038019762110110044929321516084244485963766983895228684783123552' +
	'658213144957685726243344189303968642624341077322697802807318915441101044682325' +
	'271620105265227211166039666557309254711055785376346682065310989652691862056476' +
	'931257058635662018558100729360659876486117910453348850346113657686753249441668' +
	'039626579787718556084552965412665408530614344431858676975145661406800700237877' +
	'659134401712749470420562230538994561314071127000407854733269939081454664645880' +
	'797270826683063432858785698305235808933065757406795457163775254202114955761581' +
	'400250126228594130216471550979259230990796547376125517656751357517829666454779' +
	'174501129961489030463994713296210734043751895735961458901938971311179042978285' +
	'647503203198691514028708085990480109412147221317947647772622414254854540332157' +
	'185306142288137585043063321751829798662237172159160771669254748738986654949450' +
	'114654062843366393790039769265672146385306736096571209180763832716641627488880' +
	'078692560290228472104031721186082041900042296617119637792133757511495950156604' +
	'963186294726547364252308177036751590673502350728354056704038674351362222477158' +
	'915049530984448933309634087807693259939780541934144737744184263129860809988868' +
	'741326047215695162396586457302163159819319516735381297416772947867242292465436' +
	'680098067692823828068996400482435403701416314965897940924323789690706977942236' +
	'250822168895738379862300159377647165122893578601588161755782973523344604281512' +
	'627203734314653197777416031990665541876397929334419521541341899485444734567383' +
	'162499341913181480927777103863877343177207545654532207770921201905166096280490' +
	'926360197598828161332316663652861932668633606273567630354477628035045077723554' +
	'710585954870279081435624014517180624643626794561275318134078330336254232783944' +
	'975382437205835311477119926063813346776879695970309833913077109870408591337464' +
	'144282277263465947047458784778720192771528073176790770715721344473060570073349' +
	'243693113835049316312840425121925651798069411352801314701304781643788518529092' +
	'854520116583934196562134914341595625865865570552690496520985803385072242648293' +
	'972858478316305777756068887644624824685792603953527734803048029005876075825104' +
	'747091643961362676044925627420420832085661190625454337213153595845068772460290' +
	'161876679524061634252257719542916299193064553779914037340432875262888963995879' +
	'475729174642635745525407909145135711136941091193932519107602082520261879853188' +
	'770584297259167781314969900901921169717372784768472686084900337702424291651300' +
	'500516832336435038951702989392233451722013812806965011784408745196012122859937' +
	'162313017114448464090389064495444006198690754851602632750529834918740786680881';

},{}],11:[function(require,module,exports){
const Canvas = require('../lib/canvas');
const Vector = require('../lib/vector');
const config = require('./config');

module.exports = function (selector) {
	const canvas = new Canvas(selector);
	const origin = canvas.origin;

	document.documentElement.style.backgroundColor = config.BACKGROUND_COLOR;
	canvas.fill(config.BACKGROUND_COLOR);

	const digits = config.DIGITS.split('').map(Number);
	let i = 0;

	digits.forEach(function (digit) {
		const path = [];
		const iAfter = i + digit + 1;

		for (let j = i; j <= iAfter; j++) {
			const direction = Math.PI / 150 * j - Math.PI / 2;
			const magnitude = Math.max(1200 / Math.pow(j / 3500 + 1, 1.5) - 50, 0);

			const vector = Vector.fromDirection(direction, magnitude);
			const coord = origin.add(vector);

			path.push({ type: 'L', x: coord.x, y: coord.y });
		}

		i = iAfter + 3;

		path[0].type = 'M';

		const width = 20 - Math.pow(i / 40, 0.5);

		canvas.drawPath({
			path,
			width,
			color: config.COLOR,
			lineCap: 'round'
		});
	});
};

},{"../lib/canvas":3,"../lib/vector":7,"./config":10}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
